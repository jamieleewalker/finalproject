package music.service;

import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import music.controller.model.ArtistData;
import music.controller.model.ArtistData.SongData;
import music.dao.ArtistDao;
import music.entity.Artist;
import music.entity.Song;

@Service
public class MusicService {
	@Autowired
	private ArtistDao artistDao;
	
	@Transactional(readOnly = false)
	public ArtistData saveArtist(ArtistData artistData) {
		Artist artist = artistData.toArtist();
		Artist dbArtist = artistDao.save(artist);
		
		return new SongData(dbArtist);
		}
	
	@Transactional(readOnly = true)
	public SongData retrieveSongById(Long songId) {
		Song song = findSongById(songId);
		return new SongData(song);
	}
	
	private Song findSongById(Long songId) {
		return artistDao.findById(songId).orElseThrow(() 
				-> new NoSuchElementException("song with ID=" + songId + " was not found"));
	}
	@Transactional(readOnly = true)
	public List<SongData> retrieveAllSongs() {
		List<Song> songEntities = artistDao.findAll();
		List<SongData> songDtos = new LinkedList<>();
		
		songEntities.sort((son1, son2) -> son1.getSongTitle().compareTo(son2.getSongTitle()));
		
		for(Song song : songEntities) {
			SongData songData = new SongData(song);
			songDtos.add(songData);
		}
		return songDtos;		
	}
	
	@Transactional(readOnly = false)
	public void deleteSong(Long songId) {
		Song song = findSongById(songId);
		artistDao.delete(song);
	}
}
